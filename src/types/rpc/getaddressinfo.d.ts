declare type AddressInfoResult = {
  /** The bitcoin address validated. */
  address: string
  /** The hex-encoded scriptPubKey generated by the address. */
  scriptPubKey: string
  /** If the address is yours. */
  ismine: boolean
  /** If the address is watchonly. */
  iswatchonly: boolean
  /**
   * If we know how to spend coins sent to this address, ignoring the possible lack of private keys.
   */
  solvable: boolean
  /** A descriptor for spending coins sent to this address (only when solvable). */
  desc?: string
  /** The descriptor used to derive this address if this is a descriptor wallet */
  parent_desc?: string
  /** If the key is a script. */
  isscript: boolean
  /** If the address was used for change output. */
  ischange: boolean
  /** If the address is a witness address. */
  iswitness: boolean
  /** The version number of the witness program. */
  witness_version?: number
  /** The hex value of the witness program. */
  witness_program?: string
  /**
   * The output script type. Only if isscript is true and the redeemscript is known. Possible
   * types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,
   * witness_v0_scripthash, witness_unknown.
   */
  script?: string
  /** The redeemscript for the p2sh address. */
  hex?: string
  /** Array of pubkeys associated with the known redeemscript (only if script is multisig). */
  pubkeys?: string[]
  /** The number of signatures required to spend multisig output (only if script is multisig). */
  sigsrequired?: number
  /**
   * The hex value of the raw public key for single-key addresses (possibly embedded in P2SH or P2WSH).
   */
  pubkey?: string
  /** Information about the address embedded in P2SH or P2WSH, if relevant and known. */
  embedded?: Dict<string | boolean | number | object>
  /** If the pubkey is compressed. */
  iscompressed?: boolean
  /** The creation time of the key, if available, expressed in UNIX epoch time. */
  timestamp?: number
  /** The HD keypath, if the key is HD and available. */
  hdkeypath?: string
  /** The Hash160 of the HD seed. */
  hdseedid?: string
  /** The fingerprint of the master key. */
  hdmasterfingerprint?: string
  /**
   * Array of labels associated with the address. Currently limited to one label but returned
   * as an array to keep the API stable if multiple labels are enabled in the future.
   */
  labels: string[]
}
